use std::str::FromStr;

use ast;

grammar;

pub Noise: ast::Token = {
    <find:Find> <order:Order?> <ret:Return?> <limit:Limit?> => {
        ast::Token::Noise(Box::new(find), order.unwrap_or(Vec::new()), Box::new(ret),
                          Box::new(limit))
    }
};

Find: ast::Token = {
    LiteralFind "{}" => ast::Token::All,
    LiteralFind <OrBoolObject>,
};

KeyValue: ast::Token = {
    // This one recurses down nested objects
    <key:LiteralOrField> ":" <value:NotHelper<BoostHelper<Object>>> => {
        ast::Token::Object(key, Box::new(value))
    },
    // This matches an object where the value is an array
    <key:LiteralOrField> ":" <bind:Bind?> <value:BoostHelper<Array>> => {
        match bind {
            Some(bb) => ast::Token::Object(key, Box::new(ast::Token::Bind(bb, Box::new(value)))),
            None => ast::Token::Object(key, Box::new(value))
        }
    },
    // This matches once we hit an operator within an object or array
    BoostHelper<KeyOperatorValue>,
    // Allow parenthesis
    NotHelper<BoostHelper<Parenthesis>>,
};

KeyOperatorValue: ast::Token = {
    // Within an array the operator might not have a key
    <key:(<LiteralOrField> ":")?> <op:Operator> <value:JsonPrimitive> => {
        match op {
            ast::OperatorType::Equal => ast::Token::Equal(key, Box::new(value)),
            ast::OperatorType::Greater => ast::Token::Greater(key, Box::new(value)),
            ast::OperatorType::GreaterEqual => ast::Token::GreaterEqual(key, Box::new(value)),
            // TODO vmx 2017-11-08: Make this a proper error instead of a panic
            ast::OperatorType::Intersect => panic!("error: bounding box operator needs a proper bounding box [W, S, E, N] as value"),
            ast::OperatorType::Less => ast::Token::Less(key, Box::new(value)),
            ast::OperatorType::LessEqual => ast::Token::LessEqual(key, Box::new(value)),
            ast::OperatorType::NotEqual => ast::Token::Not(Box::new(ast::Token::Equal(key, Box::new(value)))),
            ast::OperatorType::NotWordMatch => ast::Token::Not(Box::new(ast::Token::WordMatch(key, Box::new(value)))),
            ast::OperatorType::WordMatch => ast::Token::WordMatch(key, Box::new(value)),
        }
    },
    <key:(<LiteralOrField> ":")?> "&&" <bbox:Bbox> => {
        ast::Token::Intersect(key, Box::new(bbox))
    },
};

Parenthesis: ast::Token = {
    "(" <OrBool> ")"
};

// Parenthesis around top-level objects
ParenthesisObject: ast::Token = {
    "(" <OrBoolObject> ")"
};

Object: ast::Token = {
    "{" <OrBool> "}",
    ParenthesisObject,
};

Array: ast::Token = {
    // Arrays can contain objects...
    "[" <NotHelper<BoostHelper<Object>>> "]" => ast::Token::Array(Box::new(<>)),
    // ...or operators
    "[" <OrBool> "]" => ast::Token::Array(Box::new(<>)),
};

Bind: String = {
    <Field> "::" => String::from(<>)
};

// A Literal is any unicode character surrounded by double quotes
Literal: String = {
    // From https://stackoverflow.com/questions/249791/regex-for-quoted-string-with-escaping-quotes/249937#249937
    <with_quotes:r#""(?:[^"\\]|\\.)*""#> => String::from(&with_quotes[1..with_quotes.len() - 1]),
};

// A Field start with an alphabetic (or `_`, or `$`) character optionally followed by any number of
// alphanumneric (or `_`, or `$`) characters. It isn't surrounded by quotes.
Field: String = {
    r"[\p{Alphabetic}_\$][\p{Alphabetic}\p{N}_\$]*" => String::from(<>),
    LiteralFind => String::from(<>),
    LiteralOrder => String::from(<>),
    LiteralReturn => String::from(<>),
    LiteralLimit => String::from(<>),
    LiteralAsc => String::from(<>),
    LiteralDesc => String::from(<>),
    LiteralArray => String::from(<>),
    LiteralArrayFlat => String::from(<>),
    LiteralAvg => String::from(<>),
    LiteralCount => String::from(<>),
    LiteralConcat => String::from(<>),
    LiteralGroup => String::from(<>),
    LiteralMax => String::from(<>),
    LiteralMaxArray => String::from(<>),
    LiteralMin => String::from(<>),
    LiteralMinArray => String::from(<>),
    LiteralScore => String::from(<>),
    LiteralSum => String::from(<>),
};

LiteralOrField: String = {
    Literal,
    Field,
};

Number: f64 = {
    Float,
    UnsignedInteger => <> as f64,
};

// Based on https://stackoverflow.com/questions/13340717/json-numbers-regular-expression/13340826#13340826
Float: f64 = {
    r"-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?" => f64::from_str(<>).unwrap(),
};

UnsignedInteger: u64 = {
     r"\d+" => u64::from_str(<>).unwrap()
};

JsonPrimitive: ast::Token = {
    LiteralNull => ast::Token::JsonNull,
    LiteralFalse => ast::Token::JsonBool(false),
    LiteralTrue => ast::Token::JsonBool(true),
    Number => ast::Token::JsonNumber(<>),
    Literal => ast::Token::JsonString(<>),
};

Bbox: ast::Token = {
    "[" <ww:Number> "," <ss:Number> "," <ee:Number> "," <nn:Number> "]" => {
        ast::Token::Bbox(ww, ss, ee, nn)
    }
};

Boost: u64 = {
   "^" <UnsignedInteger>
};

// Returns a token wrapped in a boost if there was one
BoostHelper<T>: T = {
    <token:T> <boost:Boost?> => {
        match boost {
            Some(bb) => ast::Token::Boost(bb, Box::new(token)),
            None => token,
        }
    }
};

Not: () = {
    "!"
};

NotHelper<T>: T = {
    <not:Not?> <token:T> => {
        match not {
            Some(nn) => ast::Token::Not(Box::new(token)),
            None => token,
        }
    }
};

Operator: ast::OperatorType = {
    "&&" => ast::OperatorType::Intersect,
    "==" => ast::OperatorType::Equal,
    ">" => ast::OperatorType::Greater,
    ">=" => ast::OperatorType::GreaterEqual,
    "<" => ast::OperatorType::Less,
    "<=" => ast::OperatorType::LessEqual,
    "!=" => ast::OperatorType::NotEqual,
    "!~=" => ast::OperatorType::NotWordMatch,
    "~=" => ast::OperatorType::WordMatch,
};


// Booleans within objects/arrays
AndBool = Bool<AndBoolOp, KeyValue>;
OrBool = Bool<OrBoolOp, AndBool>;

// Boolean for top-level objects
AndBoolObject = Bool<AndBoolOp, NotHelper<BoostHelper<Object>>>;
OrBoolObject = Bool<OrBoolOp, AndBoolObject>;

AndBoolOp: ast::BoolType = {
    "," => ast::BoolType::And,
    "&&" => ast::BoolType::And,
};

OrBoolOp: ast::BoolType = {
    "||" => ast::BoolType::Or,
};

Bool<BoolOp, NextBool>: ast::Token = {
  <left:Bool<BoolOp, NextBool>> <op:BoolOp> <right:NextBool> => {
     match op {
         ast::BoolType::And => ast::Token::And(Box::new(left), Box::new(right)),
         ast::BoolType::Or => ast::Token::Or(Box::new(left), Box::new(right)),
     }
  },
  NextBool,
};


Order: Vec<ast::Token> = {
    LiteralOrder <AscDesc> => vec![ast::Token::Order(Box::new(None), <>)],
    LiteralOrder <Comma<OrderCondition>>,
};

OrderCondition: ast::Token = {
    <path:Path> <ascdesc:AscDesc?> => {
        ast::Token::Order(Box::new(Some(path)), ascdesc.unwrap_or(ast::OrderType::None))
    },
    <score:Score> <ascdesc:AscDesc?> => {
        ast::Token::Order(Box::new(Some(score)), ascdesc.unwrap_or(ast::OrderType::None))
    },
};

AscDesc: ast::OrderType = {
    LiteralAsc => ast::OrderType::Asc,
    LiteralDesc => ast::OrderType::Desc,
};


Comma<T>: Vec<T> = {
   <items:(<T> ",")*> <last:T?> => match last {
       None => items,
       Some(last) => {
           let mut items = items;
           items.push(last);
           items
       },
   }
};


Return: ast::Token = {
    LiteralReturn <ReturnClause>
};

ReturnClause: ast::Token = {
    "{" <Comma<ReturnKeyValue>> "}" => ast::Token::ReturnObject(<>),
    "[" <Comma<ReturnClause>> "]" => ast::Token::ReturnArray(<>),
    JsonPrimitive,
    "." => ast::Token::All,
    Path,
    <bind:Field> <path:Path?> => ast::Token::ReturnBind(String::from(bind), Box::new(path)),
    Function,
};

Path: ast::Token = {
    <path:(<DotField> <PathPart*>)> <default:("default" "=" <Json>)?> => {
        let (field, mut rest) = path;
        rest.insert(0, field);
        let pp = ast::Token::Path(rest);
        match default {
            Some(dd) => ast::Token::Default(Box::new(dd), Box::new(pp)),
            None => pp,
        }
    }
};

// A part of a path is anything between dots
PathPart: ast::Token = {
    DotField,
    "[" <Literal> "]" => ast::Token::JsonString(<>),
    "[" <UnsignedInteger> "]" => ast::Token::PathArray(Some(<>)),
    "[" "]" => ast::Token::PathArray(None),
};

DotField: ast::Token = {
    <with_dot:r"\.[\p{Alphabetic}_\$][\p{Alphabetic}\p{N}_\$]*"> => {
        ast::Token::JsonString(String::from(&with_dot[1..]))
    }
};

Json: ast::Token = {
   JsonPrimitive,
   "{" <literal:Literal> ":" <json:Json> "}" => ast::Token::JsonObject(literal, Box::new(json)),
   "[" <Comma<Json>> "]" => ast::Token::JsonArray(<>),
};

ReturnKeyValue: ast::Token = {
    <key:LiteralOrField> ":" <value:ReturnClause> => {
        ast::Token::Object(key, Box::new(value))
    }
};

Function: ast::Token = {
   LiteralArray "(" <Path> ")" => ast::Token::GroupArray(Box::new(<>)),
   LiteralArrayFlat "(" <Path> ")" => ast::Token::ArrayFlat(Box::new(<>)),
   LiteralAvg "(" <Path> ")" => ast::Token::Avg(Box::new(<>)),
   LiteralCount "(" ")" => ast::Token::Count,
   LiteralConcat "(" <path:Path> <sep:("sep" "=" <Literal>)?> ")" => {
       ast::Token::Concat(Box::new(path), sep)
   },
   LiteralGroup "(" <path:Path> <ascdesc:AscDesc?> ")" => {
       ast::Token::Group(Box::new(path), ascdesc.unwrap_or(ast::OrderType::None))
   },
   LiteralMax "(" <Path> ")" => ast::Token::Max(Box::new(<>)),
   LiteralMaxArray "(" <Path> ")" => ast::Token::MaxArray(Box::new(<>)),
   LiteralMin "(" <Path> ")" => ast::Token::Min(Box::new(<>)),
   LiteralMinArray "(" <Path> ")" => ast::Token::MinArray(Box::new(<>)),
   Score,
   LiteralSum "(" <Path> ")" => ast::Token::Sum(Box::new(<>)),
};

Score: ast::Token = {
   LiteralScore "(" ")" => ast::Token::Score
};


Limit: ast::Token = {
    LiteralLimit <UnsignedInteger> => ast::Token::Limit(<>)
};


// Make all those keywords to productions so they can be used to prevent clashed between keywords
// and free-form names
LiteralFind = "find";
LiteralOrder = "order";
LiteralReturn = "return";
LiteralLimit = "limit";

LiteralFalse = "false";
LiteralTrue = "true";
LiteralNull = "null";

LiteralAsc = "asc";
LiteralDesc = "desc";

LiteralArray = "array";
LiteralArrayFlat = "array_flat";
LiteralAvg = "avg";
LiteralCount = "count";
LiteralConcat = "concat";
LiteralGroup = "group";
LiteralMax = "max";
LiteralMaxArray = "max_array";
LiteralMin = "min";
LiteralMinArray = "min_array";
LiteralScore = "score";
LiteralSum = "sum";


match {
    // Give unsigned ints a higher priority than floats
    r"\d+"
} else {
    _
}
