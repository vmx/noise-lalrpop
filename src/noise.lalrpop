use std::str::FromStr;

use ast;

grammar;

pub Noise: ast::Token = {
    "find" <BoostHelper<Object>>
};

KeyValue: ast::Token = {
    // This one recurses down nested objects
    <key:Literal> ":" <value:BoostHelper<Object>> => {
        ast::Token::Object(key, Box::new(value))
    },
    // This matches an object where the value is an array
    <key:Literal> ":" <bind:Bind?> <value:BoostHelper<Array>> => {
        match bind {
            Some(bb) => ast::Token::Object(key, Box::new(ast::Token::Bind(bb, Box::new(value)))),
            None => ast::Token::Object(key, Box::new(value))
        }
    },
    // This matches once we hit an operator within an object or array
    BoostHelper<KeyOperatorValue>,
    // Allow parenthesis
    BoostHelper<Parenthesis>,
};

KeyOperatorValue: ast::Token = {
    // Within an array the operator might not have a key
    <key:(<Literal> ":")?> <op:Operator> <value:Literal> => {
        match op {
            ast::OperatorType::Equal => ast::Token::Equal(key, value)
        }
    }
};

Parenthesis: ast::Token = {
    "(" <OrBool> ")"
};

Object: ast::Token = {
    "{" <OrBool> "}"
};

Array: ast::Token = {
    // Arrays can contain objects...
    "[" <BoostHelper<Object>> "]" => ast::Token::Array(Box::new(<>)),
    // ...or operators
    "[" <OrBool> "]" => ast::Token::Array(Box::new(<>)),
};

Bind: String = {
    // TODO vmx 2017-11-08: Match bind variable name as implemented in the current parser
    <r#"\w+"#> "::" => String::from(<>)
};

Literal: String = {
    // TODO vmx 2017-11-03: Match literal as implemented in the current parser (with escaping)
    r#"""# <r#"\w+"#> r#"""# => String::from(<>),

};

Boost: u64 = {
    // TODO vmx 2017-11-07: Add proper error handling
    "^" <r"[0-9]+"> => u64::from_str(<>).unwrap()
};

// Returns a token wrapped in a boost if there was one
BoostHelper<T>: T = {
    <token:T> <boost:Boost?> => {
        match boost {
            Some(bb) => ast::Token::Boost(bb, Box::new(token)),
            None => token,
        }
    }
};


Operator: ast::OperatorType = {
    "==" => ast::OperatorType::Equal,
};


AndBool = Bool<AndBoolOp, KeyValue>;
OrBool = Bool<OrBoolOp, AndBool>;

AndBoolOp: ast::BoolType = {
    "," => ast::BoolType::And,
    "&&" => ast::BoolType::And,
};

OrBoolOp: ast::BoolType = {
    "||" => ast::BoolType::Or,
};

Bool<BoolOp, NextBool>: ast::Token = {
  <left:Bool<BoolOp, NextBool>> <op:BoolOp> <right:NextBool> => {
     match op {
         ast::BoolType::And => ast::Token::And(Box::new(left), Box::new(right)),
         ast::BoolType::Or => ast::Token::Or(Box::new(left), Box::new(right)),
     }
  },
  NextBool,
};


match {
    r"[0-9]+"
} else {
    _
}
